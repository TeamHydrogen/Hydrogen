--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.20 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		PlaySoundOnClient = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		PlaySoundToAll = table.freeze({
			On = noop
		}),
		GetPlayerData = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("com.isophes.hydrogen.network")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "com.isophes.hydrogen.network"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
reliable_events[0] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value, value2
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local angle_1 = axisangle_1.Magnitude
				if angle_1 ~= 0 then
					value2 = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
				else
					value2 = CFrame.new(pos_1)
				end
			else
				value2 = nil
			end
			for _, cb in reliable_events[0] do
				task.spawn(cb, player, value, value2)
			end
		elseif id == 1 then
			local call_id = buffer.readu8(buff, read(1))
			local value
			if reliable_events[1] then
				task.spawn(function(player_2, call_id_2, value_1)
					local ret_1 = reliable_events[1](player_2, value_1)
					load_player(player_2)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, 1)
					alloc(1)
					buffer.writeu8(outgoing_buff, outgoing_apos, call_id_2)
					if ret_1 == nil then
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 0)
					else
						alloc(1)
						buffer.writeu8(outgoing_buff, outgoing_apos, 1)
						table.insert(outgoing_inst, ret_1)
					end
					player_map[player_2] = save()
				end, player, call_id, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	PlaySoundOnClient = {
		Fire = function(Player: Player, Sound: (string), CFrame: ((CFrame)?))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_2 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_2)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_1, angle_2 = CFrame:ToAxisAngle()
				axis_1 = axis_1 * angle_2
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
			player_map[Player] = save()
		end,
		FireAll = function(Sound: (string), CFrame: ((CFrame)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_3 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_3)
			alloc(len_3)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_3)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_2, angle_3 = CFrame:ToAxisAngle()
				axis_2 = axis_2 * angle_3
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_2.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_2.Z)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Sound: (string), CFrame: ((CFrame)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_4 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
			alloc(len_4)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_4)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_3, angle_4 = CFrame:ToAxisAngle()
				axis_3 = axis_3 * angle_4
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_3.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_3.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_3.Z)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Sound: (string), CFrame: ((CFrame)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_5 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
			alloc(len_5)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_5)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_4, angle_5 = CFrame:ToAxisAngle()
				axis_4 = axis_4 * angle_5
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_4.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_4.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_4.Z)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireSet = function(Set: { [Player]: true }, Sound: (string), CFrame: ((CFrame)?))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_6 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
			alloc(len_6)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_6)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_5, angle_6 = CFrame:ToAxisAngle()
				axis_5 = axis_5 * angle_6
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_5.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_5.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_5.Z)
			end
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for player in Set do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	PlaySoundToAll = {
		On = function(Callback: (Player: Player, Sound: (string), CFrame: ((CFrame)?)) -> ()): () -> ()
			table.insert(reliable_events[0], Callback)
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	GetPlayerData = {
		SetCallback = function(Callback: (Player: Player) -> (((unknown)))): () -> ()
			reliable_events[1] = Callback
			return function()
				reliable_events[1] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
