--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.20 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number
local outgoing_ids: { number }

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number
local incoming_ids: { number }

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
		outgoing_ids = outgoing_ids,
		incoming_ids = incoming_ids,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
	outgoing_ids: { number },
	incoming_ids: { number },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
	outgoing_ids = data.outgoing_ids
	incoming_ids = data.incoming_ids
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
	outgoing_ids = {}
	incoming_ids = {}
end

load_empty()

local types = {}

local polling_queues_reliable = {}
local polling_queues_unreliable = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		PlaySoundOnClient = table.freeze({
			On = noop
		}),
		PlaySoundToAll = table.freeze({
			Fire = noop
		}),
		GetPlayerData = table.freeze({
			Call = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("com.isophes.hydrogen.network")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")


local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(2)
local reliable_event_queue: { [number]: { any } } = table.create(2)
local function_call_id = 0
reliable_events[0] = {}
reliable_event_queue[0] = {}
reliable_event_queue[1] = table.create(255)
reliable.OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value, value2
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value = buffer.readstring(incoming_buff, read(len_1), len_1)
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				local pos_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local axisangle_1 = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
				local angle_1 = axisangle_1.Magnitude
				if angle_1 ~= 0 then
					value2 = CFrame.fromAxisAngle(axisangle_1, angle_1) + pos_1
				else
					value2 = CFrame.new(pos_1)
				end
			else
				value2 = nil
			end
			if reliable_events[0][1] then
				for _, cb in reliable_events[0] do
					task.spawn(cb, value, value2)
				end
			else
				table.insert(reliable_event_queue[0], { value, value2 })
				if #reliable_event_queue[0] > 64 then
					warn(`[ZAP] {#reliable_event_queue[0]} events in queue for PlaySoundOnClient. Did you forget to attach a listener?`)
				end
			end
		elseif id == 1 then
			local call_id = buffer.readu8(incoming_buff, read(1))
			local value
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value = incoming_inst[incoming_ipos]
			else
				value = nil
			end
			local thread = reliable_event_queue[1][call_id]
			-- When using actors it's possible for multiple Zap clients to exist, but only one called the Zap remote function.
			if thread then
				task.spawn(thread, value)
			end
			reliable_event_queue[1][call_id] = nil
		else
			error("Unknown event id")
		end
	end
end)
table.freeze(polling_queues_reliable)
table.freeze(polling_queues_unreliable)

local returns = {
	SendEvents = SendEvents,
	PlaySoundToAll = {
		Fire = function(Sound: (string), CFrame: ((CFrame)?))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			local len_2 = #Sound
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_2)
			alloc(len_2)
			buffer.writestring(outgoing_buff, outgoing_apos, Sound, len_2)
			if CFrame == nil then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			else
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
				local axis_1, angle_2 = CFrame:ToAxisAngle()
				axis_1 = axis_1 * angle_2
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, CFrame.Position.Z)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.X)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Y)
				alloc(4)
				buffer.writef32(outgoing_buff, outgoing_apos, axis_1.Z)
			end
		end,
	},
	PlaySoundOnClient = {
		On = function(Callback: (Sound: (string), CFrame: ((CFrame)?)) -> ())
			table.insert(reliable_events[0], Callback)
			for _, value in reliable_event_queue[0] do
				task.spawn(Callback, unpack(value))
			end
			reliable_event_queue[0] = {}
			return function()
				table.remove(reliable_events[0], table.find(reliable_events[0], Callback))
			end
		end,
	},
	GetPlayerData = {
		Call = function(): (((unknown)))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			function_call_id += 1
			function_call_id %= 256
			if reliable_event_queue[1][function_call_id] then
				function_call_id -= 1
				error("Zap has more than 256 calls awaiting a response, and therefore this packet has been dropped")
			end
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, function_call_id)
			reliable_event_queue[1][function_call_id] = coroutine.running()
			return coroutine.yield()
		end,
	},
}
type Events = typeof(returns)
return returns
